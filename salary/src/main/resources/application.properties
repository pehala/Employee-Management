quarkus.http.port = 8082

# configure your datasource
quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = postgres
quarkus.datasource.password = pass
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/salary

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = update

# core service
core-service/mp-rest/url=http://localhost:8080/

# vacation service
vacation-service/mp-rest/url=http://localhost:8081/

# https://stackoverflow.com/questions/62691824/how-can-the-authorization-header-be-propagated-in-quarkus-apps-with-the-micropro
mp.rest.client.propagateHeaders=Authorization
resteasy.role.based.security=true

# OIDC Configuration
quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/myrealm
quarkus.oidc.client-id=employee-management
quarkus.oidc.credentials.secret=710078a7-7db6-4268-9cfa-3b39f2630412
quarkus.oidc.tls.verification=none

%test.quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/
%test.quarkus.oidc.client-id=quarkus-app
%test.quarkus.oidc.credentials.secret=secret
%test.quarkus.oidc.token.principal-claim=email

%test.quarkus.datasource.db-kind = h2
%test.quarkus.datasource.jdbc.url = jdbc:h2:tcp://localhost/mem:test
%test.quarkus.datasource.username = test
%test.quarkus.datasource.password = test
%test.quarkus.datasource.jdbc.driver = org.h2.Driver
%test.quarkus.hibernate-orm.database.generation = drop-and-create